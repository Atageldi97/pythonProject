# Generated by Django 3.0.2 on 2021-06-06 14:10

import app.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserReklam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone1', models.IntegerField(null=True)),
                ('phone2', models.IntegerField(null=True)),
                ('email', models.EmailField(max_length=254, null=True)),
                ('web', models.CharField(max_length=250, null=True)),
                ('photo', models.ImageField(null=True, upload_to='reklams/users')),
                ('vip', models.BooleanField(default=False)),
                ('profession', models.BooleanField(default=False)),
                ('check', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, null=True)),
                ('region_id', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Brands',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, null=True)),
                ('photo', models.ImageField(null=True, upload_to=app.models.brands_photo)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('photo', models.ImageField(null=True, upload_to='reklams/colors')),
            ],
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, null=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Category')),
            ],
        ),
        migrations.CreateModel(
            name='Reklam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, null=True)),
                ('slug', models.SlugField(max_length=250, unique_for_date='created')),
                ('photo1', models.ImageField(default=0, null=True, upload_to=app.models.reklam_photos)),
                ('photo2', models.ImageField(default=0, null=True, upload_to=app.models.reklam_photos)),
                ('photo3', models.ImageField(default=0, null=True, upload_to=app.models.reklam_photos)),
                ('photo4', models.ImageField(default=0, null=True, upload_to=app.models.reklam_photos)),
                ('photo5', models.ImageField(default=0, null=True, upload_to=app.models.reklam_photos)),
                ('photo6', models.ImageField(default=0, null=True, upload_to=app.models.reklam_photos)),
                ('photo7', models.ImageField(default=0, null=True, upload_to=app.models.reklam_photos)),
                ('photo8', models.ImageField(default=0, null=True, upload_to=app.models.reklam_photos)),
                ('photo9', models.ImageField(default=0, null=True, upload_to=app.models.reklam_photos)),
                ('photo10', models.ImageField(default=0, null=True, upload_to=app.models.reklam_photos)),
                ('phone', models.IntegerField(default=0, null=True)),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('count', models.IntegerField(default=1, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('ready', models.BooleanField(default=False, null=True)),
                ('vip', models.BooleanField(default=False)),
                ('export', models.BooleanField(default=False)),
                ('kredit', models.BooleanField(default=False, null=True)),
                ('obmen', models.BooleanField(default=False, null=True)),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Address')),
                ('brand', models.ForeignKey(default=0, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Brands')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Category')),
                ('color', models.ManyToManyField(to='app.Color')),
                ('gender', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Gender')),
                ('size', models.ManyToManyField(to='app.Size')),
                ('subcategory', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.SubCategory')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, null=True)),
                ('slug', models.SlugField(max_length=250, unique_for_date='created')),
                ('photo1', models.ImageField(default=0, null=True, upload_to=app.models.reklam_photos)),
                ('photo2', models.ImageField(default=0, null=True, upload_to=app.models.reklam_photos)),
                ('photo3', models.ImageField(default=0, null=True, upload_to=app.models.reklam_photos)),
                ('photo4', models.ImageField(default=0, null=True, upload_to=app.models.reklam_photos)),
                ('photo5', models.ImageField(default=0, null=True, upload_to=app.models.reklam_photos)),
                ('text', models.CharField(max_length=1500, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Category')),
                ('subcategory', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.SubCategory')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user_like', models.ManyToManyField(blank=True, related_name='liked', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Messages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=1000, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('recipient', models.CharField(max_length=500, null=True)),
                ('sender', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FirmReklam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('email', models.EmailField(max_length=254, null=True)),
                ('web_address', models.CharField(max_length=255, null=True)),
                ('phone', models.IntegerField(null=True)),
                ('photo1', models.ImageField(null=True, upload_to=app.models.firmek_photos)),
                ('photo2', models.ImageField(null=True, upload_to=app.models.firmek_photos)),
                ('photo3', models.ImageField(null=True, upload_to=app.models.firmek_photos)),
                ('photo4', models.ImageField(null=True, upload_to=app.models.firmek_photos)),
                ('photo5', models.ImageField(null=True, upload_to=app.models.firmek_photos)),
                ('text', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now=True, null=True)),
                ('vip', models.BooleanField(default=False)),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Address')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Category')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Favourites',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('phone', models.IntegerField(null=True)),
                ('text', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('brands', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Brands')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Category')),
                ('subcategory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.SubCategory')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('user_from', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rel_from_set', to=settings.AUTH_USER_MODEL)),
                ('user_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rel_to_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.AddField(
            model_name='brands',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Category'),
        ),
        migrations.AddField(
            model_name='userreklam',
            name='address',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Address'),
        ),
        migrations.AddField(
            model_name='userreklam',
            name='following',
            field=models.ManyToManyField(related_name='followers', through='app.Contact', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userreklam',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userreklam',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
